// Code generated by protoc-gen-go. DO NOT EDIT.
// source: world_bank.proto

package worldbank

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SearchString struct {
	SearchString         string   `protobuf:"bytes,1,opt,name=searchString,proto3" json:"searchString,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchString) Reset()         { *m = SearchString{} }
func (m *SearchString) String() string { return proto.CompactTextString(m) }
func (*SearchString) ProtoMessage()    {}
func (*SearchString) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{0}
}

func (m *SearchString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchString.Unmarshal(m, b)
}
func (m *SearchString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchString.Marshal(b, m, deterministic)
}
func (m *SearchString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchString.Merge(m, src)
}
func (m *SearchString) XXX_Size() int {
	return xxx_messageInfo_SearchString.Size(m)
}
func (m *SearchString) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchString.DiscardUnknown(m)
}

var xxx_messageInfo_SearchString proto.InternalMessageInfo

func (m *SearchString) GetSearchString() string {
	if m != nil {
		return m.SearchString
	}
	return ""
}

type CountryID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountryID) Reset()         { *m = CountryID{} }
func (m *CountryID) String() string { return proto.CompactTextString(m) }
func (*CountryID) ProtoMessage()    {}
func (*CountryID) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{1}
}

func (m *CountryID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountryID.Unmarshal(m, b)
}
func (m *CountryID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountryID.Marshal(b, m, deterministic)
}
func (m *CountryID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryID.Merge(m, src)
}
func (m *CountryID) XXX_Size() int {
	return xxx_messageInfo_CountryID.Size(m)
}
func (m *CountryID) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryID.DiscardUnknown(m)
}

var xxx_messageInfo_CountryID proto.InternalMessageInfo

func (m *CountryID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type CountryFilter struct {
	IncomeLevel          string   `protobuf:"bytes,1,opt,name=incomeLevel,proto3" json:"incomeLevel,omitempty"`
	Region               string   `protobuf:"bytes,2,opt,name=region,proto3" json:"region,omitempty"`
	LendingType          string   `protobuf:"bytes,3,opt,name=lendingType,proto3" json:"lendingType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountryFilter) Reset()         { *m = CountryFilter{} }
func (m *CountryFilter) String() string { return proto.CompactTextString(m) }
func (*CountryFilter) ProtoMessage()    {}
func (*CountryFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{2}
}

func (m *CountryFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountryFilter.Unmarshal(m, b)
}
func (m *CountryFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountryFilter.Marshal(b, m, deterministic)
}
func (m *CountryFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryFilter.Merge(m, src)
}
func (m *CountryFilter) XXX_Size() int {
	return xxx_messageInfo_CountryFilter.Size(m)
}
func (m *CountryFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryFilter.DiscardUnknown(m)
}

var xxx_messageInfo_CountryFilter proto.InternalMessageInfo

func (m *CountryFilter) GetIncomeLevel() string {
	if m != nil {
		return m.IncomeLevel
	}
	return ""
}

func (m *CountryFilter) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *CountryFilter) GetLendingType() string {
	if m != nil {
		return m.LendingType
	}
	return ""
}

type Country struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Capital              string   `protobuf:"bytes,3,opt,name=capital,proto3" json:"capital,omitempty"`
	Region               string   `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	IncomeLevel          string   `protobuf:"bytes,5,opt,name=incomeLevel,proto3" json:"incomeLevel,omitempty"`
	LendingType          string   `protobuf:"bytes,6,opt,name=lendingType,proto3" json:"lendingType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Country) Reset()         { *m = Country{} }
func (m *Country) String() string { return proto.CompactTextString(m) }
func (*Country) ProtoMessage()    {}
func (*Country) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{3}
}

func (m *Country) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Country.Unmarshal(m, b)
}
func (m *Country) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Country.Marshal(b, m, deterministic)
}
func (m *Country) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Country.Merge(m, src)
}
func (m *Country) XXX_Size() int {
	return xxx_messageInfo_Country.Size(m)
}
func (m *Country) XXX_DiscardUnknown() {
	xxx_messageInfo_Country.DiscardUnknown(m)
}

var xxx_messageInfo_Country proto.InternalMessageInfo

func (m *Country) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Country) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Country) GetCapital() string {
	if m != nil {
		return m.Capital
	}
	return ""
}

func (m *Country) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *Country) GetIncomeLevel() string {
	if m != nil {
		return m.IncomeLevel
	}
	return ""
}

func (m *Country) GetLendingType() string {
	if m != nil {
		return m.LendingType
	}
	return ""
}

type Region struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Region) Reset()         { *m = Region{} }
func (m *Region) String() string { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()    {}
func (*Region) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{4}
}

func (m *Region) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Region.Unmarshal(m, b)
}
func (m *Region) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Region.Marshal(b, m, deterministic)
}
func (m *Region) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Region.Merge(m, src)
}
func (m *Region) XXX_Size() int {
	return xxx_messageInfo_Region.Size(m)
}
func (m *Region) XXX_DiscardUnknown() {
	xxx_messageInfo_Region.DiscardUnknown(m)
}

var xxx_messageInfo_Region proto.InternalMessageInfo

func (m *Region) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Region) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type IncomeLevel struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncomeLevel) Reset()         { *m = IncomeLevel{} }
func (m *IncomeLevel) String() string { return proto.CompactTextString(m) }
func (*IncomeLevel) ProtoMessage()    {}
func (*IncomeLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{5}
}

func (m *IncomeLevel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IncomeLevel.Unmarshal(m, b)
}
func (m *IncomeLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IncomeLevel.Marshal(b, m, deterministic)
}
func (m *IncomeLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncomeLevel.Merge(m, src)
}
func (m *IncomeLevel) XXX_Size() int {
	return xxx_messageInfo_IncomeLevel.Size(m)
}
func (m *IncomeLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_IncomeLevel.DiscardUnknown(m)
}

var xxx_messageInfo_IncomeLevel proto.InternalMessageInfo

func (m *IncomeLevel) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *IncomeLevel) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LendingType struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LendingType) Reset()         { *m = LendingType{} }
func (m *LendingType) String() string { return proto.CompactTextString(m) }
func (*LendingType) ProtoMessage()    {}
func (*LendingType) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{6}
}

func (m *LendingType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LendingType.Unmarshal(m, b)
}
func (m *LendingType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LendingType.Marshal(b, m, deterministic)
}
func (m *LendingType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LendingType.Merge(m, src)
}
func (m *LendingType) XXX_Size() int {
	return xxx_messageInfo_LendingType.Size(m)
}
func (m *LendingType) XXX_DiscardUnknown() {
	xxx_messageInfo_LendingType.DiscardUnknown(m)
}

var xxx_messageInfo_LendingType proto.InternalMessageInfo

func (m *LendingType) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LendingType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{7}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SearchString)(nil), "worldbank.SearchString")
	proto.RegisterType((*CountryID)(nil), "worldbank.CountryID")
	proto.RegisterType((*CountryFilter)(nil), "worldbank.CountryFilter")
	proto.RegisterType((*Country)(nil), "worldbank.Country")
	proto.RegisterType((*Region)(nil), "worldbank.Region")
	proto.RegisterType((*IncomeLevel)(nil), "worldbank.IncomeLevel")
	proto.RegisterType((*LendingType)(nil), "worldbank.LendingType")
	proto.RegisterType((*Void)(nil), "worldbank.Void")
}

func init() {
	proto.RegisterFile("world_bank.proto", fileDescriptor_80e88e541218c326)
}

var fileDescriptor_80e88e541218c326 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x4f, 0xfa, 0x40,
	0x10, 0xc5, 0xff, 0xed, 0x1f, 0x4b, 0x3a, 0x80, 0xe2, 0xc4, 0x90, 0x06, 0x2f, 0x64, 0x4f, 0x1e,
	0x0c, 0x51, 0x8c, 0x89, 0x37, 0xa3, 0x12, 0x0d, 0x09, 0x27, 0x30, 0x7a, 0x34, 0x85, 0x6e, 0x70,
	0x43, 0xd9, 0x25, 0xdb, 0x55, 0xc3, 0xe7, 0xf1, 0x93, 0xf8, 0xcd, 0x4c, 0xdb, 0x45, 0x07, 0x4a,
	0x62, 0x6f, 0xcc, 0x9b, 0xf7, 0xde, 0xfe, 0x48, 0xa6, 0xd0, 0xfc, 0x50, 0x3a, 0x8e, 0x5e, 0x26,
	0xa1, 0x9c, 0x77, 0x97, 0x5a, 0x19, 0x85, 0x7e, 0xa6, 0xa4, 0x02, 0xeb, 0x41, 0x7d, 0xcc, 0x43,
	0x3d, 0x7d, 0x1d, 0x1b, 0x2d, 0xe4, 0x0c, 0x19, 0xd4, 0x13, 0x32, 0x07, 0x4e, 0xc7, 0x39, 0xf1,
	0x47, 0x1b, 0x1a, 0x3b, 0x06, 0xff, 0x4e, 0xbd, 0x49, 0xa3, 0x57, 0x83, 0x3e, 0xee, 0x83, 0x2b,
	0x22, 0x6b, 0x73, 0x45, 0xc4, 0xe6, 0xd0, 0xb0, 0xcb, 0x7b, 0x11, 0x1b, 0xae, 0xb1, 0x03, 0x35,
	0x21, 0xa7, 0x6a, 0xc1, 0x87, 0xfc, 0x9d, 0xc7, 0xd6, 0x49, 0x25, 0x6c, 0x81, 0xa7, 0xf9, 0x4c,
	0x28, 0x19, 0xb8, 0xd9, 0xd2, 0x4e, 0x69, 0x32, 0xe6, 0x32, 0x12, 0x72, 0xf6, 0xb8, 0x5a, 0xf2,
	0xe0, 0x7f, 0x9e, 0x24, 0x12, 0xfb, 0x74, 0xa0, 0x6a, 0x5f, 0xdb, 0x06, 0x41, 0x84, 0x8a, 0x0c,
	0x17, 0xdc, 0x76, 0x66, 0xbf, 0x31, 0x80, 0xea, 0x34, 0x5c, 0x0a, 0x13, 0xc6, 0xb6, 0x6d, 0x3d,
	0x12, 0x86, 0xca, 0x36, 0x03, 0xa5, 0xdf, 0x2b, 0xd2, 0x6f, 0x51, 0x7a, 0x45, 0xca, 0x53, 0xf0,
	0x46, 0x79, 0x5b, 0x09, 0x46, 0x76, 0x0e, 0xb5, 0x01, 0xa9, 0x2f, 0x19, 0x19, 0xfe, 0xbe, 0x57,
	0x2a, 0xe2, 0x41, 0xe5, 0x49, 0x89, 0xa8, 0xf7, 0xe5, 0x82, 0xff, 0x9c, 0x5e, 0xc3, 0x6d, 0x28,
	0xe7, 0x78, 0x09, 0xb5, 0xa1, 0x48, 0x4c, 0x4e, 0x9b, 0xe0, 0x41, 0xf7, 0xe7, 0x50, 0xba, 0xa9,
	0xbb, 0x7d, 0x48, 0x84, 0xdc, 0xc4, 0xfe, 0x9d, 0x39, 0x78, 0x0d, 0xcd, 0x34, 0x46, 0xb0, 0x77,
	0x64, 0x5b, 0x44, 0x20, 0x4e, 0x5a, 0x40, 0xfe, 0xc4, 0x1f, 0x05, 0xc4, 0x99, 0x15, 0xdc, 0x40,
	0x23, 0x2d, 0xc8, 0x6f, 0x41, 0xf0, 0x04, 0x03, 0x62, 0xde, 0xb8, 0xc7, 0x36, 0x16, 0x37, 0x59,
	0xc5, 0x15, 0xc0, 0x03, 0x37, 0xeb, 0x6b, 0x3a, 0x2a, 0xba, 0x06, 0xfd, 0xdd, 0xd9, 0x89, 0x97,
	0x7d, 0x55, 0x17, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x37, 0xa3, 0x95, 0x66, 0x69, 0x03, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorldBankClient is the client API for WorldBank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorldBankClient interface {
	ListRegions(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorldBank_ListRegionsClient, error)
	ListIncomeLevels(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorldBank_ListIncomeLevelsClient, error)
	ListLendingTypes(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorldBank_ListLendingTypesClient, error)
	ListCountries(ctx context.Context, in *CountryFilter, opts ...grpc.CallOption) (WorldBank_ListCountriesClient, error)
	GetCountry(ctx context.Context, in *CountryID, opts ...grpc.CallOption) (*Country, error)
}

type worldBankClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldBankClient(cc grpc.ClientConnInterface) WorldBankClient {
	return &worldBankClient{cc}
}

func (c *worldBankClient) ListRegions(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorldBank_ListRegionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorldBank_serviceDesc.Streams[0], "/worldbank.WorldBank/ListRegions", opts...)
	if err != nil {
		return nil, err
	}
	x := &worldBankListRegionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorldBank_ListRegionsClient interface {
	Recv() (*Region, error)
	grpc.ClientStream
}

type worldBankListRegionsClient struct {
	grpc.ClientStream
}

func (x *worldBankListRegionsClient) Recv() (*Region, error) {
	m := new(Region)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *worldBankClient) ListIncomeLevels(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorldBank_ListIncomeLevelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorldBank_serviceDesc.Streams[1], "/worldbank.WorldBank/ListIncomeLevels", opts...)
	if err != nil {
		return nil, err
	}
	x := &worldBankListIncomeLevelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorldBank_ListIncomeLevelsClient interface {
	Recv() (*IncomeLevel, error)
	grpc.ClientStream
}

type worldBankListIncomeLevelsClient struct {
	grpc.ClientStream
}

func (x *worldBankListIncomeLevelsClient) Recv() (*IncomeLevel, error) {
	m := new(IncomeLevel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *worldBankClient) ListLendingTypes(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorldBank_ListLendingTypesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorldBank_serviceDesc.Streams[2], "/worldbank.WorldBank/ListLendingTypes", opts...)
	if err != nil {
		return nil, err
	}
	x := &worldBankListLendingTypesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorldBank_ListLendingTypesClient interface {
	Recv() (*LendingType, error)
	grpc.ClientStream
}

type worldBankListLendingTypesClient struct {
	grpc.ClientStream
}

func (x *worldBankListLendingTypesClient) Recv() (*LendingType, error) {
	m := new(LendingType)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *worldBankClient) ListCountries(ctx context.Context, in *CountryFilter, opts ...grpc.CallOption) (WorldBank_ListCountriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorldBank_serviceDesc.Streams[3], "/worldbank.WorldBank/ListCountries", opts...)
	if err != nil {
		return nil, err
	}
	x := &worldBankListCountriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorldBank_ListCountriesClient interface {
	Recv() (*Country, error)
	grpc.ClientStream
}

type worldBankListCountriesClient struct {
	grpc.ClientStream
}

func (x *worldBankListCountriesClient) Recv() (*Country, error) {
	m := new(Country)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *worldBankClient) GetCountry(ctx context.Context, in *CountryID, opts ...grpc.CallOption) (*Country, error) {
	out := new(Country)
	err := c.cc.Invoke(ctx, "/worldbank.WorldBank/GetCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldBankServer is the server API for WorldBank service.
type WorldBankServer interface {
	ListRegions(*Void, WorldBank_ListRegionsServer) error
	ListIncomeLevels(*Void, WorldBank_ListIncomeLevelsServer) error
	ListLendingTypes(*Void, WorldBank_ListLendingTypesServer) error
	ListCountries(*CountryFilter, WorldBank_ListCountriesServer) error
	GetCountry(context.Context, *CountryID) (*Country, error)
}

// UnimplementedWorldBankServer can be embedded to have forward compatible implementations.
type UnimplementedWorldBankServer struct {
}

func (*UnimplementedWorldBankServer) ListRegions(req *Void, srv WorldBank_ListRegionsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRegions not implemented")
}
func (*UnimplementedWorldBankServer) ListIncomeLevels(req *Void, srv WorldBank_ListIncomeLevelsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListIncomeLevels not implemented")
}
func (*UnimplementedWorldBankServer) ListLendingTypes(req *Void, srv WorldBank_ListLendingTypesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListLendingTypes not implemented")
}
func (*UnimplementedWorldBankServer) ListCountries(req *CountryFilter, srv WorldBank_ListCountriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (*UnimplementedWorldBankServer) GetCountry(ctx context.Context, req *CountryID) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}

func RegisterWorldBankServer(s *grpc.Server, srv WorldBankServer) {
	s.RegisterService(&_WorldBank_serviceDesc, srv)
}

func _WorldBank_ListRegions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorldBankServer).ListRegions(m, &worldBankListRegionsServer{stream})
}

type WorldBank_ListRegionsServer interface {
	Send(*Region) error
	grpc.ServerStream
}

type worldBankListRegionsServer struct {
	grpc.ServerStream
}

func (x *worldBankListRegionsServer) Send(m *Region) error {
	return x.ServerStream.SendMsg(m)
}

func _WorldBank_ListIncomeLevels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorldBankServer).ListIncomeLevels(m, &worldBankListIncomeLevelsServer{stream})
}

type WorldBank_ListIncomeLevelsServer interface {
	Send(*IncomeLevel) error
	grpc.ServerStream
}

type worldBankListIncomeLevelsServer struct {
	grpc.ServerStream
}

func (x *worldBankListIncomeLevelsServer) Send(m *IncomeLevel) error {
	return x.ServerStream.SendMsg(m)
}

func _WorldBank_ListLendingTypes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorldBankServer).ListLendingTypes(m, &worldBankListLendingTypesServer{stream})
}

type WorldBank_ListLendingTypesServer interface {
	Send(*LendingType) error
	grpc.ServerStream
}

type worldBankListLendingTypesServer struct {
	grpc.ServerStream
}

func (x *worldBankListLendingTypesServer) Send(m *LendingType) error {
	return x.ServerStream.SendMsg(m)
}

func _WorldBank_ListCountries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CountryFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorldBankServer).ListCountries(m, &worldBankListCountriesServer{stream})
}

type WorldBank_ListCountriesServer interface {
	Send(*Country) error
	grpc.ServerStream
}

type worldBankListCountriesServer struct {
	grpc.ServerStream
}

func (x *worldBankListCountriesServer) Send(m *Country) error {
	return x.ServerStream.SendMsg(m)
}

func _WorldBank_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldBankServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worldbank.WorldBank/GetCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldBankServer).GetCountry(ctx, req.(*CountryID))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorldBank_serviceDesc = grpc.ServiceDesc{
	ServiceName: "worldbank.WorldBank",
	HandlerType: (*WorldBankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCountry",
			Handler:    _WorldBank_GetCountry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRegions",
			Handler:       _WorldBank_ListRegions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListIncomeLevels",
			Handler:       _WorldBank_ListIncomeLevels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListLendingTypes",
			Handler:       _WorldBank_ListLendingTypes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListCountries",
			Handler:       _WorldBank_ListCountries_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "world_bank.proto",
}
