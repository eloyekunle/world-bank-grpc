// Code generated by protoc-gen-go. DO NOT EDIT.
// source: world_bank.proto

package world_bank

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SearchString struct {
	SearchString         string   `protobuf:"bytes,1,opt,name=searchString,proto3" json:"searchString,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchString) Reset()         { *m = SearchString{} }
func (m *SearchString) String() string { return proto.CompactTextString(m) }
func (*SearchString) ProtoMessage()    {}
func (*SearchString) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{0}
}

func (m *SearchString) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchString.Unmarshal(m, b)
}
func (m *SearchString) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchString.Marshal(b, m, deterministic)
}
func (m *SearchString) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchString.Merge(m, src)
}
func (m *SearchString) XXX_Size() int {
	return xxx_messageInfo_SearchString.Size(m)
}
func (m *SearchString) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchString.DiscardUnknown(m)
}

var xxx_messageInfo_SearchString proto.InternalMessageInfo

func (m *SearchString) GetSearchString() string {
	if m != nil {
		return m.SearchString
	}
	return ""
}

type CountryID struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountryID) Reset()         { *m = CountryID{} }
func (m *CountryID) String() string { return proto.CompactTextString(m) }
func (*CountryID) ProtoMessage()    {}
func (*CountryID) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{1}
}

func (m *CountryID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountryID.Unmarshal(m, b)
}
func (m *CountryID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountryID.Marshal(b, m, deterministic)
}
func (m *CountryID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountryID.Merge(m, src)
}
func (m *CountryID) XXX_Size() int {
	return xxx_messageInfo_CountryID.Size(m)
}
func (m *CountryID) XXX_DiscardUnknown() {
	xxx_messageInfo_CountryID.DiscardUnknown(m)
}

var xxx_messageInfo_CountryID proto.InternalMessageInfo

func (m *CountryID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Country struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Country) Reset()         { *m = Country{} }
func (m *Country) String() string { return proto.CompactTextString(m) }
func (*Country) ProtoMessage()    {}
func (*Country) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{2}
}

func (m *Country) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Country.Unmarshal(m, b)
}
func (m *Country) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Country.Marshal(b, m, deterministic)
}
func (m *Country) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Country.Merge(m, src)
}
func (m *Country) XXX_Size() int {
	return xxx_messageInfo_Country.Size(m)
}
func (m *Country) XXX_DiscardUnknown() {
	xxx_messageInfo_Country.DiscardUnknown(m)
}

var xxx_messageInfo_Country proto.InternalMessageInfo

type Void struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}
func (*Void) Descriptor() ([]byte, []int) {
	return fileDescriptor_80e88e541218c326, []int{3}
}

func (m *Void) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Void.Unmarshal(m, b)
}
func (m *Void) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Void.Marshal(b, m, deterministic)
}
func (m *Void) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Void.Merge(m, src)
}
func (m *Void) XXX_Size() int {
	return xxx_messageInfo_Void.Size(m)
}
func (m *Void) XXX_DiscardUnknown() {
	xxx_messageInfo_Void.DiscardUnknown(m)
}

var xxx_messageInfo_Void proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SearchString)(nil), "SearchString")
	proto.RegisterType((*CountryID)(nil), "CountryID")
	proto.RegisterType((*Country)(nil), "Country")
	proto.RegisterType((*Void)(nil), "Void")
}

func init() {
	proto.RegisterFile("world_bank.proto", fileDescriptor_80e88e541218c326)
}

var fileDescriptor_80e88e541218c326 = []byte{
	// 185 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xcf, 0x2f, 0xca,
	0x49, 0x89, 0x4f, 0x4a, 0xcc, 0xcb, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe2, 0xe2,
	0x09, 0x4e, 0x4d, 0x2c, 0x4a, 0xce, 0x08, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x17, 0x52, 0xe2, 0xe2,
	0x29, 0x46, 0xe2, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xa1, 0x88, 0x29, 0x49, 0x73, 0x71,
	0x3a, 0xe7, 0x97, 0xe6, 0x95, 0x14, 0x55, 0x7a, 0xba, 0x08, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x40,
	0x95, 0x31, 0x65, 0xa6, 0x28, 0x71, 0x72, 0xb1, 0x43, 0x25, 0x95, 0xd8, 0xb8, 0x58, 0xc2, 0xf2,
	0x33, 0x53, 0x8c, 0x5a, 0x19, 0xb9, 0x38, 0xc3, 0x41, 0x16, 0x3b, 0x25, 0xe6, 0x65, 0x0b, 0xa9,
	0x70, 0xf1, 0xfa, 0x64, 0x16, 0x97, 0x40, 0x14, 0x65, 0xa6, 0x16, 0x0b, 0xb1, 0xea, 0x81, 0x54,
	0x49, 0x71, 0xe8, 0xc1, 0xf4, 0x31, 0x18, 0x30, 0x0a, 0xe9, 0x70, 0xf1, 0x42, 0xdc, 0x05, 0x15,
	0x14, 0xe2, 0xd5, 0x43, 0x76, 0x27, 0x9a, 0x6a, 0x15, 0x2e, 0x2e, 0xf7, 0xd4, 0x12, 0x98, 0x52,
	0x2e, 0x3d, 0xb8, 0xf3, 0x90, 0xd5, 0x25, 0xb1, 0x81, 0xbd, 0x6c, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0x15, 0x41, 0xcb, 0x76, 0x06, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WorldBankClient is the client API for WorldBank service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorldBankClient interface {
	ListCountries(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorldBank_ListCountriesClient, error)
	SearchCountry(ctx context.Context, in *SearchString, opts ...grpc.CallOption) (WorldBank_SearchCountryClient, error)
	GetCountry(ctx context.Context, in *CountryID, opts ...grpc.CallOption) (*Country, error)
}

type worldBankClient struct {
	cc grpc.ClientConnInterface
}

func NewWorldBankClient(cc grpc.ClientConnInterface) WorldBankClient {
	return &worldBankClient{cc}
}

func (c *worldBankClient) ListCountries(ctx context.Context, in *Void, opts ...grpc.CallOption) (WorldBank_ListCountriesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorldBank_serviceDesc.Streams[0], "/WorldBank/ListCountries", opts...)
	if err != nil {
		return nil, err
	}
	x := &worldBankListCountriesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorldBank_ListCountriesClient interface {
	Recv() (*Country, error)
	grpc.ClientStream
}

type worldBankListCountriesClient struct {
	grpc.ClientStream
}

func (x *worldBankListCountriesClient) Recv() (*Country, error) {
	m := new(Country)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *worldBankClient) SearchCountry(ctx context.Context, in *SearchString, opts ...grpc.CallOption) (WorldBank_SearchCountryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WorldBank_serviceDesc.Streams[1], "/WorldBank/SearchCountry", opts...)
	if err != nil {
		return nil, err
	}
	x := &worldBankSearchCountryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WorldBank_SearchCountryClient interface {
	Recv() (*Country, error)
	grpc.ClientStream
}

type worldBankSearchCountryClient struct {
	grpc.ClientStream
}

func (x *worldBankSearchCountryClient) Recv() (*Country, error) {
	m := new(Country)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *worldBankClient) GetCountry(ctx context.Context, in *CountryID, opts ...grpc.CallOption) (*Country, error) {
	out := new(Country)
	err := c.cc.Invoke(ctx, "/WorldBank/GetCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorldBankServer is the server API for WorldBank service.
type WorldBankServer interface {
	ListCountries(*Void, WorldBank_ListCountriesServer) error
	SearchCountry(*SearchString, WorldBank_SearchCountryServer) error
	GetCountry(context.Context, *CountryID) (*Country, error)
}

// UnimplementedWorldBankServer can be embedded to have forward compatible implementations.
type UnimplementedWorldBankServer struct {
}

func (*UnimplementedWorldBankServer) ListCountries(req *Void, srv WorldBank_ListCountriesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCountries not implemented")
}
func (*UnimplementedWorldBankServer) SearchCountry(req *SearchString, srv WorldBank_SearchCountryServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchCountry not implemented")
}
func (*UnimplementedWorldBankServer) GetCountry(ctx context.Context, req *CountryID) (*Country, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCountry not implemented")
}

func RegisterWorldBankServer(s *grpc.Server, srv WorldBankServer) {
	s.RegisterService(&_WorldBank_serviceDesc, srv)
}

func _WorldBank_ListCountries_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorldBankServer).ListCountries(m, &worldBankListCountriesServer{stream})
}

type WorldBank_ListCountriesServer interface {
	Send(*Country) error
	grpc.ServerStream
}

type worldBankListCountriesServer struct {
	grpc.ServerStream
}

func (x *worldBankListCountriesServer) Send(m *Country) error {
	return x.ServerStream.SendMsg(m)
}

func _WorldBank_SearchCountry_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchString)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorldBankServer).SearchCountry(m, &worldBankSearchCountryServer{stream})
}

type WorldBank_SearchCountryServer interface {
	Send(*Country) error
	grpc.ServerStream
}

type worldBankSearchCountryServer struct {
	grpc.ServerStream
}

func (x *worldBankSearchCountryServer) Send(m *Country) error {
	return x.ServerStream.SendMsg(m)
}

func _WorldBank_GetCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorldBankServer).GetCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/WorldBank/GetCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorldBankServer).GetCountry(ctx, req.(*CountryID))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorldBank_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WorldBank",
	HandlerType: (*WorldBankServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCountry",
			Handler:    _WorldBank_GetCountry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCountries",
			Handler:       _WorldBank_ListCountries_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SearchCountry",
			Handler:       _WorldBank_SearchCountry_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "world_bank.proto",
}
